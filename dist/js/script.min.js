"use strict";function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}var san=function(t){var e="boolean"!=typeof t.once||t.once,r=t.threshold>=.1&&t.threshold<=1?t.threshold:.5;console.log(e);var n=new IntersectionObserver((function(t){t.forEach((function(t){var r=t.target,a=r.dataset.san||"",o=parseInt(r.dataset.sanDelay)/1e3;t.isIntersecting&&!r.classList.contains(a)?(a&&r.classList.add("animated",a),Number.isFinite(o)&&o>.099&&r.setAttribute("style","animation-delay: ".concat(o,"s")),e&&n.unobserve(r)):r.classList.remove(a)}))}),{root:null,threshold:r}),a=_toConsumableArray(document.querySelectorAll("[data-san]"));a.length&&a.forEach((function(t){return n.observe(t)}))};san();